plugins {
    id 'java'
    alias(libs.plugins.springframework.boot)
    alias(libs.plugins.spring.dependency.management)
    alias(libs.plugins.asciidoctor)
    alias(libs.plugins.restdocsApiSpec)
    id 'jacoco'
}

group = 'com.hello.account'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = "${libs.versions.java.get()}"
}

jacoco {
    toolVersion = "${libs.versions.jacoco.get()}"
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExt
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    implementation "com.google.guava:guava:${libs.versions.guava.get()}"

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.rest-assured:rest-assured'

    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-restassured'

    testImplementation "com.epages:restdocs-api-spec-restassured:${libs.versions.restdocsApiSpec.get()}"
    testImplementation "com.epages:restdocs-api-spec-mockmvc:${libs.versions.restdocsApiSpec.get()}"
}

ext {
    snippetsDir = file('build/generated-snippets')
}

test {
    useJUnitPlatform()
    outputs.dir snippetsDir
    finalizedBy jacocoTestReport
}

asciidoctor {
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'
    baseDirFollowsSourceFile()
    dependsOn test
}

asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

tasks.register('createDocument', Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

bootJar {
    dependsOn createDocument
    from ("${asciidoctor.outputDir}") {
        into 'static/docs'
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            '**/*Application*',
                            '**/*Exception*',
                            '**/health/**',
                            '**/dto/**',
                    ])
                })
        )
    }
    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'

            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 0.50
            }

            excludes = [
                    '*.*Application',
                    '*.*Exception',
                    '*.health.*',
                    '*.dto.*',
            ]
        }
    }
}

openapi3 {
    setOutputFileNamePrefix('account')
    server = 'http://localhost:9000'
    title = 'My Pay Application Document'
    description = 'Account Service API 문서입니다.'
    outputDirectory = "${rootDir.absolutePath}/swagger-ui/api-spec"
    version = '0.1.0'
    format = 'yaml'
}